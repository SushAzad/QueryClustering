questionId 	queryContent		questionId	question
1	SELECT s.FirstName FROM Students s  WHERE s.LastName LIKE "A%"  AND s.Department="Statistics" ORDER BY s.FirstName desc		1	Popular Name
1	SELECT Firstname FROM Students WHERE Department="Statistics" AND LastName LIKE 'A%' ORDER BY FirstName DESC		2	Best Performer
2	SELECT small.NetId FROM ( SELECT c.CRN, MAX(e.Score) as hi_score         FROM Enrollments e, Courses c, Students s         WHERE e.NetId = s.NetId and c.CRN = e.CRN          and c.Department = "CS"         GROUP BY c.CRN) inter   JOIN (SELECT e.NetId, e.CRN, s.Department, e.Score                 FROM Enrollments e, Students s                  WHERE e.NetId=s.NetId                  and s.Department <> "CS"             ) small  ON inter.CRN = small.CRN AND inter.hi_score = small.Score ORDER BY small.NetId asc 		3	Course Enrollment
2	Select NetId  from Students NATURAL JOIN Enrollments where (CRN, Score) in (Select E.CRN, max(Score) From Enrollments E, Courses C Where E.CRN = C.CRN and C.Department = 'CS' Group By E.CRN) AND Students.Department <> 'CS'		4	Brand Sales
3	SELECT DISTINCT s.NetId, FirstName, LastName FROM Students s, Enrollments e  WHERE s.NetId = e.NetId and e.CRN in     (SELECT inter.CRN FROM         (SELECT CRN, COUNT(*) as heads         FROM Enrollments         GROUP BY CRN) inter, Courses c     WHERE inter.heads >= 2 and c.CRN = inter.CRN     and c.Department="CS")		5	Number of ECE Courses
3	Select distinct NetId, FirstName, LastName from Students s natural join Enrollments e where CRN in (select CRN                  from Enrollments e natural join Courses c                 where Department='CS'                 group by CRN                 having count(e.netId) >=2)		6	University Database
4	SELECT BrandName, COUNT(PurchaseId) as purchase_count FROM (Products prod) LEFT JOIN (Purchases purch) ON prod.ProductId=purch.ProductId GROUP BY BrandName ORDER BY purchase_count desc, BrandName asc		7	Products released in the same year
4	Select p.BrandName as bn, count(pur.PurchaseId) as purc From Products p left outer join Purchases pur on p.ProductId=pur.ProductId group by p.BrandName order by purc desc, bn		8	Who purcahsed products at more thna average prices?
5	SELECT s.FirstName, COUNT(*) as num_ECE_courses FROM (Students s) NATURAL JOIN (Enrollments e), Courses c WHERE e.CRN = c.CRN and c.Department="ECE" GROUP BY s.NetId ORDER BY num_ECE_courses asc, FirstName desc		9	Trigger to avail discount on repeated purcahses
5	Select s.FirstName as nam, count(e.CRN) as cnt from Students s, Enrollments e, Courses c Where s.netId=e.netId and e.CRN=c.CRN and c.Department='ECE' group by s.FirstName order by cnt, nam desc		10	Stored Procedure to display the final result of students 
5	Select S.FirstName as fn, count(temp.crn) as cnt from (Select S.NetID as net, E.CRN as crn from Students S, Enrollments E, Courses C where S.NetID = E.NetId and E.CRN=C.CRN and C.Department = 'ECE') as temp, Students S where S.NetId=temp.net group by temp.net order by cnt, fn DESC;			
6	UPDATE Enrollments SET Credits = 4 WHERE CRN = 301;  UPDATE Courses  SET Instructor = "Bell Anderson" WHERE CRN = 301;  INSERT INTO Students (NetId, FirstName, LastName, Department) VALUES ("afro2", "Archer", "Frost", "Music");  INSERT INTO Enrollments (NetId, CRN, Credits, Score) VALUES ("afro2", 301, 4, 96.0);  SELECT e.CRN, c.Title, AVG(score) as avg_score FROM Enrollments e NATURAL JOIN Courses c GROUP BY CRN, Title ORDER BY avg_score desc;			
6	UPDATE Enrollments SET Credits = 4 WHERE CRN=301;   UPDATE Courses SET Instructor = "Anderson Bell" WHERE CRN=301;   INSERT INTO Students VALUES ("afro2", "Archer", "Frost","Music");   INSERT INTO Enrollments VALUES ("afro2", 301, 4, 96.0);  Select C.CRN, C.Title, avg(E.Score) as av from Enrollments E, Courses C Where E.CRN=C.CRN group by C.CRN order by av desc			
7	 SELECT P.ProductName, COUNT(P2.ProductId) as num_products FROM (Products P) LEFT OUTER JOIN (Products P2) ON P.BrandName <> P2.BrandName AND      P.YearReleased = P2.YearReleased GROUP BY P.ProductId, P.ProductName ORDER BY P.ProductName asc			
7	Select p1.ProductName as pz, count(p2.ProductName) From Products p1 left outer join Products p2 on p1.YearReleased = p2.YearReleased AND p1.BrandName <> p2.BrandName  Group by p1.ProductName Order by pz			
8	SELECT inter.FirstName, inter.LastName FROM( SELECT DISTINCT FirstName, LastName, c.CustomerId FROM Customers c, Purchases p,     (SELECT ProductId, AVG(Price) as avg_price     FROM Purchases GROUP BY ProductId) temp  WHERE p.ProductId = temp.ProductId      AND c.CustomerId = p.CustomerId     AND p.Price > avg_price ORDER BY c.CustomerId desc) inter 			
8	Select fname, lname from (select distinct  CustomerId as cust, FirstName as fname, LastName as lname from Customers c natural join Purchases p, (select ProductId, avg(Price) as av from Purchases group by ProductId) t1 Where p.productId = t1.productId AND p.Price>t1.av order by CustomerId desc) t2			
8	select haha.fn, haha.ln from (select distinct c.FirstName as fn, c.LastName as ln, c.CustomerId as cid     from  Customers c,      Purchases pur,          (select p.ProductId as id, avg(p.Price) as price         from Purchases p          group by p.productId) as temp where c.customerId = pur.customerId and pur.ProductId = temp.id and pur.Price>temp.price order by c.CustomerId desc) haha;  			
9	CREATE TRIGGER RepeatPurchase  BEFORE INSERT ON Purchases  FOR EACH ROW  BEGIN     IF (NEW.CustomerId, NEW.ProductId) in (SELECT CustomerId, ProductId FROM Purchases) THEN     SET NEW.Price = NEW.Price*.70;     END IF; END;  INSERT INTO Purchases (PurchaseId, CustomerId, ProductId, Price) VALUES (500, 20, 5, 500);			
9	CREATE TRIGGER before_purchases_insert  BEFORE INSERT  ON Purchases FOR EACH ROW  BEGIN  IF (new.CustomerId, new.ProductId) in (select CustomerId, ProductId from Purchases) THEN  Set new.Price = new.Price - 0.3*new.Price;  END IF;   END;     INSERT into Purchases  Values(500,20,5,500);			
10	  CREATE PROCEDURE Result()      BEGIN          DECLARE done int default 0;     DECLARE currNetId VARCHAR(10);     DECLARE currFirst VARCHAR(255);     DECLARE currLast VARCHAR(255);     DECLARE currAvg REAL;          DECLARE final_res VARCHAR(5);      DECLARE studcur CURSOR FOR SELECT DISTINCT NetId, FirstName, LastName, AVG(Score) as average_score FROM Students S NATURAL JOIN Enrollments E GROUP BY (NetId);          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;               DROP TABLE IF EXISTS NewTable;          CREATE TABLE NewTable (         NetId VARCHAR(10),         FirstName VARCHAR(255),         LastName VARCHAR (255),         FinalResult VARCHAR(5)     );          OPEN studcur;               loopLabel: LOOP         FETCH studcur INTO currNetId, currFirst, currLast, currAvg;         IF done = 1 THEN              LEAVE loopLabel;      END IF;               IF currAvg >= 60 THEN SET final_res = "Pass";         ELSE SET final_res = "Fail";         END IF;                  INSERT INTO NewTable          VALUES (currNetId, currFirst, currLast, final_res);     END LOOP loopLabel;       CLOSE studcur;          SELECT * FROM NewTable;      END;    			
10	CREATE PROCEDURE Result()  BEGIN  DECLARE done int default 0;  DECLARE netid VARCHAR(10);  DECLARE fname VARCHAR(255);  DECLARE lname VARCHAR(255);  DECLARE finres VARCHAR(4);  DECLARE avgscore REAL;  DECLARE rescur CURSOR FOR SELECT S.NetID, S.FirstName, S.LastName, avg(E.Score) as avgsc from Students S, Enrollments E where S.NetId=E.NetId group by S.NetId;  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=1;     DROP TABLE IF EXISTS NewTable;      CREATE TABLE NewTable (  NetId VARCHAR(10),  FirstName VARCHAR(255),  LastName VARCHAR(255),  FinalResult VARCHAR(4)  );     OPEN rescur;     bloop: LOOP  FETCH rescur INTO netid, fname, lname, avgscore;  IF done=1 then  LEAVE bloop;  END IF;  IF avgscore >= 60 THEN   SET finres = 'Pass';  ELSE SET finres = 'Fail';  END IF;  INSERT INTO NewTable VALUES(netid, fname, lname, finres);  END LOOP bloop;     CLOSE rescur;     SELECT * FROM NewTable;  END;			